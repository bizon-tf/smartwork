name: 메인 브랜치 CI

on:
  push:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test-and-build:
    name: 테스트 및 빌드
    runs-on: ubuntu-latest
    
    steps:
    - name: 코드 체크아웃
      uses: actions/checkout@v5
      
    # 프론트엔드 테스트 및 빌드
    - name: Node.js 설정
      uses: actions/setup-node@v4
      with:
        node-version: '24.7.0'
        cache: 'yarn'
        cache-dependency-path: frontend/yarn.lock
        
    - name: 프론트엔드 의존성 설치
      working-directory: ./frontend
      run: yarn install --frozen-lockfile
      
    - name: 프론트엔드 테스트 (커버리지)
      working-directory: ./frontend
      run: yarn test --run --coverage
      
    - name: 프론트엔드 빌드
      working-directory: ./frontend
      run: yarn build
      
    - name: 프론트엔드 빌드 결과물 업로드
      uses: actions/upload-artifact@v4
      with:
        name: frontend-dist
        path: frontend/dist/
        retention-days: 7
        
    - name: 프론트엔드 테스트 커버리지 업로드
      uses: actions/upload-artifact@v4
      with:
        name: frontend-coverage
        path: frontend/coverage/
        retention-days: 7
    
    # 백엔드 테스트 및 빌드
    - name: Java 24 설정
      uses: actions/setup-java@v4
      with:
        java-version: '24'
        distribution: 'temurin'
        
    - name: Gradle 캐시 설정
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Gradle 실행 권한 부여
      working-directory: ./backend
      run: chmod +x gradlew
      
    - name: 백엔드 테스트 (JaCoCo 커버리지)
      working-directory: ./backend
      run: ./gradlew test jacocoTestReport
      
    - name: 백엔드 빌드
      working-directory: ./backend
      run: ./gradlew build -x test
      
    - name: 백엔드 JAR 파일 업로드
      uses: actions/upload-artifact@v4
      with:
        name: backend-jar
        path: backend/build/libs/*.jar
        retention-days: 7
        
    - name: 백엔드 테스트 결과 업로드
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: backend-test-results
        path: |
          backend/build/reports/tests/
          backend/build/reports/jacoco/
        retention-days: 7

  code-quality:
    name: 코드 품질 분석
    runs-on: ubuntu-latest
    needs: test-and-build
    
    steps:
    - name: 코드 체크아웃
      uses: actions/checkout@v5
      with:
        fetch-depth: 0  # SonarCloud를 위한 전체 히스토리
        
    - name: Node.js 설정
      uses: actions/setup-node@v4
      with:
        node-version: '24.7.0'
        cache: 'yarn'
        cache-dependency-path: frontend/yarn.lock
        
    - name: Java 24 설정
      uses: actions/setup-java@v4
      with:
        java-version: '24'
        distribution: 'temurin'
        
    - name: 프론트엔드 커버리지 다운로드
      uses: actions/download-artifact@v4
      with:
        name: frontend-coverage
        path: frontend/coverage/
        
    - name: 백엔드 테스트 결과 다운로드
      uses: actions/download-artifact@v4
      with:
        name: backend-test-results
        path: backend/build/reports/
        
    # SonarCloud 분석 (옵션: 나중에 설정)
    # - name: SonarCloud 스캔
    #   uses: SonarSource/sonarcloud-github-action@master
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  performance-test:
    name: 성능 테스트
    runs-on: ubuntu-latest
    needs: test-and-build
    if: github.event_name == 'push'
    
    steps:
    - name: 코드 체크아웃
      uses: actions/checkout@v5
      
    - name: 백엔드 JAR 다운로드
      uses: actions/download-artifact@v4
      with:
        name: backend-jar
        path: backend/build/libs/
        
    - name: Java 24 설정
      uses: actions/setup-java@v4
      with:
        java-version: '24'
        distribution: 'temurin'
        
    - name: 백엔드 애플리케이션 실행 (백그라운드)
      working-directory: ./backend
      run: |
        java -jar build/libs/*.jar &
        echo $! > app.pid

        # 백엔드가 완전히 시작될 때까지 헬스 엔드포인트를 폴링
        for i in {1..30}; do
          if curl -fs http://localhost:8080/actuator/health > /dev/null; then
            echo "Backend is up!"
            break
          fi
          echo "Waiting for backend to start... ($i/30)"
          sleep 1
        done

        # 30초 내에 시작하지 않으면 실패 처리
        if ! curl -fs http://localhost:8080/actuator/health > /dev/null; then
          echo "Backend failed to start within timeout."
          exit 1
        fi
        
    - name: 헬스 체크
      run: |
        curl -f http://localhost:8080/actuator/health || exit 1
        
    - name: 간단한 부하 테스트
      run: |
        for i in {1..10}; do
          curl -f http://localhost:8080/actuator/health
          sleep 0.1
        done
        
    - name: 애플리케이션 종료
      working-directory: ./backend
      run: |
        kill $(cat app.pid) || true

  deployment-ready:
    name: 배포 준비 완료
    runs-on: ubuntu-latest
    needs: [test-and-build, code-quality]
    
    outputs:
      frontend-ready: ${{ steps.check.outputs.frontend }}
      backend-ready: ${{ steps.check.outputs.backend }}
      
    steps:
    - name: 배포 준비 상태 확인
      id: check
      run: |
        echo "frontend=true" >> $GITHUB_OUTPUT
        echo "backend=true" >> $GITHUB_OUTPUT
        echo "✅ 모든 테스트 및 빌드가 성공적으로 완료되었습니다."
        echo "🚀 배포 준비가 완료되었습니다."