name: 릴리즈 자동화

on:
  push:
    tags:
      - 'v*'  # v1.0.0, v1.2.3-alpha 등 버전 태그
  workflow_dispatch:
    inputs:
      version:
        description: '릴리즈 버전 (예: v1.0.0)'
        required: true
        type: string

env:
  REGISTRY: ghcr.io
  FRONTEND_IMAGE: ${{ github.repository }}-frontend
  BACKEND_IMAGE: ${{ github.repository }}-backend

jobs:
  build-and-test:
    name: 빌드 및 테스트
    runs-on: ubuntu-latest
    
    outputs:
      version: ${{ steps.version.outputs.version }}
      
    steps:
    - name: 코드 체크아웃
      uses: actions/checkout@v5
      
    - name: 버전 추출
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION=${{ github.event.inputs.version }}
        else
          VERSION=${GITHUB_REF#refs/tags/}
        fi
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "릴리즈 버전: ${VERSION}"
    
    # 프론트엔드 빌드
    - name: Node.js 설정
      uses: actions/setup-node@v5
      with:
        node-version: '24.7.0'
        cache: 'yarn'
        cache-dependency-path: frontend/yarn.lock
        
    - name: 프론트엔드 의존성 설치
      working-directory: ./frontend
      run: yarn install --frozen-lockfile
      
    - name: 프론트엔드 테스트
      working-directory: ./frontend
      run: yarn test --run
      
    - name: 프론트엔드 프로덕션 빌드
      working-directory: ./frontend
      run: yarn build
      
    # 백엔드 빌드
    - name: Java 24 설정
      uses: actions/setup-java@v4
      with:
        java-version: '24'
        distribution: 'temurin'
        
    - name: Gradle 캐시 설정
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Gradle 실행 권한 부여
      working-directory: ./backend
      run: chmod +x gradlew
      
    - name: 백엔드 테스트
      working-directory: ./backend
      run: ./gradlew test
      
    - name: 백엔드 빌드
      working-directory: ./backend
      run: ./gradlew build -x test
      
    # 빌드 결과물 업로드
    - name: 프론트엔드 빌드 결과물 업로드
      uses: actions/upload-artifact@v4
      with:
        name: frontend-dist
        path: frontend/dist/
        
    - name: 백엔드 JAR 파일 업로드
      uses: actions/upload-artifact@v4
      with:
        name: backend-jar
        path: backend/build/libs/*.jar

  docker-build:
    name: Docker 이미지 빌드
    runs-on: ubuntu-latest
    needs: build-and-test
    permissions:
      contents: read
      packages: write
    
    strategy:
      matrix:
        component: [frontend, backend]
    
    steps:
    - name: 코드 체크아웃
      uses: actions/checkout@v5
      
    - name: 빌드 결과물 다운로드
      uses: actions/download-artifact@v5
      with:
        name: ${{ matrix.component }}-${{ matrix.component == 'frontend' && 'dist' || 'jar' }}
        path: ${{ matrix.component }}/
        
    - name: JAR 파일명 찾기 (백엔드)
      if: matrix.component == 'backend'
      id: jar-name
      working-directory: ${{ matrix.component }}
      run: |
        JAR_FILE=$(ls *.jar | grep -v plain | head -1)
        echo "jar_file=${JAR_FILE}" >> $GITHUB_OUTPUT
        echo "찾은 JAR 파일: ${JAR_FILE}"
        
    - name: Docker Buildx 설정
      uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435
      
    - name: GitHub Container Registry 로그인
      uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: 메타데이터 추출
      id: meta
      uses: docker/metadata-action@8e5442c4ef9f78752691e2d8f8d19755c6f78e81
      with:
        images: ${{ env.REGISTRY }}/${{ matrix.component == 'frontend' && env.FRONTEND_IMAGE || env.BACKEND_IMAGE }}
        tags: |
          type=ref,event=tag
          type=raw,value=latest
          type=raw,value=${{ needs.build-and-test.outputs.version }}
          
    - name: Docker 이미지 빌드 및 푸시
      uses: docker/build-push-action@ca052bb54ab0790a636c9b5f226502c73d547a25
      with:
        context: ${{ matrix.component }}
        file: ${{ matrix.component }}/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          ${{ matrix.component == 'backend' && format('JAR_FILE={0}', steps.jar-name.outputs.jar_file) || '' }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  create-release:
    name: GitHub 릴리즈 생성
    runs-on: ubuntu-latest
    needs: [build-and-test, docker-build]
    permissions:
      contents: write
    
    steps:
    - name: 코드 체크아웃
      uses: actions/checkout@v5
      with:
        fetch-depth: 0
        
    - name: 프론트엔드 빌드 결과물 다운로드
      uses: actions/download-artifact@v5
      with:
        name: frontend-dist
        path: ./artifacts/frontend/
        
    - name: 백엔드 JAR 파일 다운로드
      uses: actions/download-artifact@v5
      with:
        name: backend-jar
        path: ./artifacts/backend/
        
    - name: 릴리즈 노트 생성
      id: release-notes
      run: |
        VERSION="${{ needs.build-and-test.outputs.version }}"
        
        # 이전 태그 찾기
        PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        
        # 릴리즈 노트 생성
        echo "## 🚀 릴리즈 ${VERSION}" > RELEASE_NOTES.md
        echo "" >> RELEASE_NOTES.md
        
        if [ -n "$PREV_TAG" ]; then
          echo "### 📋 변경사항" >> RELEASE_NOTES.md
          git log ${PREV_TAG}..HEAD --pretty=format:"- %s (%h)" >> RELEASE_NOTES.md
        else
          echo "### 📋 변경사항" >> RELEASE_NOTES.md
          echo "- 초기 릴리즈" >> RELEASE_NOTES.md
        fi
        
        echo "" >> RELEASE_NOTES.md
        echo "### 🐳 Docker 이미지" >> RELEASE_NOTES.md
        echo "- **프론트엔드**: \`${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE }}:${VERSION}\`" >> RELEASE_NOTES.md
        echo "- **백엔드**: \`${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE }}:${VERSION}\`" >> RELEASE_NOTES.md
        echo "" >> RELEASE_NOTES.md
        echo "### 📦 아티팩트" >> RELEASE_NOTES.md
        echo "- 프론트엔드 빌드 결과물" >> RELEASE_NOTES.md
        echo "- 백엔드 JAR 파일" >> RELEASE_NOTES.md
        
        # 파일을 환경변수로 전달
        echo 'RELEASE_BODY<<EOF' >> $GITHUB_ENV
        cat RELEASE_NOTES.md >> $GITHUB_ENV
        echo 'EOF' >> $GITHUB_ENV
        
    - name: 아티팩트 구조 확인 및 ZIP 파일 생성
      run: |
        VERSION="${{ needs.build-and-test.outputs.version }}"
        echo "=== 아티팩트 디렉토리 구조 확인 ==="
        find ./artifacts -type f -ls || echo "아티팩트 디렉토리가 비어있습니다"
        
        echo "=== ZIP 파일 생성 시작 ==="
        
        # 프론트엔드 ZIP 생성
        if [ -d "./artifacts/frontend" ] && [ "$(find ./artifacts/frontend -type f | wc -l)" -gt 0 ]; then
          cd ./artifacts/frontend
          zip -r "../../frontend-${VERSION}.zip" . -x "*.zip"
          cd ../..
          echo "✅ 프론트엔드 ZIP 생성 완료: frontend-${VERSION}.zip"
        else
          echo "⚠️  프론트엔드 파일이 없어서 ZIP 생성을 건너뜁니다"
          touch "frontend-${VERSION}.zip"  # 빈 파일 생성하여 에러 방지
        fi
        
        # 백엔드 ZIP 생성
        if [ -d "./artifacts/backend" ] && [ "$(find ./artifacts/backend -name '*.jar' | wc -l)" -gt 0 ]; then
          cd ./artifacts/backend
          zip -r "../../backend-${VERSION}.zip" *.jar
          cd ../..
          echo "✅ 백엔드 ZIP 생성 완료: backend-${VERSION}.zip"
        else
          echo "⚠️  백엔드 JAR 파일이 없어서 ZIP 생성을 건너뜁니다"
          touch "backend-${VERSION}.zip"  # 빈 파일 생성하여 에러 방지
        fi
        
        echo "=== 생성된 ZIP 파일 확인 ==="
        ls -la *.zip || echo "ZIP 파일이 생성되지 않았습니다"
        
    - name: 기존 릴리즈 확인 및 정리
      run: |
        VERSION="${{ needs.build-and-test.outputs.version }}"
        echo "버전 ${VERSION}의 기존 릴리즈 확인 중..."
        
        # GitHub CLI로 기존 릴리즈 확인
        if gh release view "${VERSION}" --json tagName > /dev/null 2>&1; then
          echo "⚠️  기존 릴리즈 ${VERSION}이 존재합니다. 삭제 중..."
          gh release delete "${VERSION}" --yes || echo "릴리즈 삭제 실패 (무시하고 계속)"
        else
          echo "✅ ${VERSION} 릴리즈가 존재하지 않습니다."
        fi
        
        # 기존 태그도 확인하고 삭제
        if git tag -l | grep -q "^${VERSION}$"; then
          echo "⚠️  기존 태그 ${VERSION}이 존재합니다. 삭제 중..."
          git tag -d "${VERSION}" || echo "로컬 태그 삭제 실패"
          git push origin ":refs/tags/${VERSION}" || echo "원격 태그 삭제 실패 (무시하고 계속)"
        else
          echo "✅ ${VERSION} 태그가 존재하지 않습니다."
        fi
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: ZIP 파일 존재 확인
      run: |
        VERSION="${{ needs.build-and-test.outputs.version }}"
        echo "=== 릴리즈에 포함할 파일 목록 확인 ==="
        
        RELEASE_FILES=""
        
        if [ -f "frontend-${VERSION}.zip" ] && [ -s "frontend-${VERSION}.zip" ]; then
          echo "✅ frontend-${VERSION}.zip 파일 확인됨 ($(du -h "frontend-${VERSION}.zip" | cut -f1))"
          RELEASE_FILES="frontend-${VERSION}.zip"
        else
          echo "⚠️  frontend-${VERSION}.zip 파일이 없거나 비어있습니다"
        fi
        
        if [ -f "backend-${VERSION}.zip" ] && [ -s "backend-${VERSION}.zip" ]; then
          echo "✅ backend-${VERSION}.zip 파일 확인됨 ($(du -h "backend-${VERSION}.zip" | cut -f1))"
          RELEASE_FILES="${RELEASE_FILES} backend-${VERSION}.zip"
        else
          echo "⚠️  backend-${VERSION}.zip 파일이 없거나 비어있습니다"
        fi
        
        echo "RELEASE_FILES=${RELEASE_FILES}" >> $GITHUB_ENV
        echo "릴리즈에 포함될 파일: ${RELEASE_FILES}"
        
    - name: GitHub 릴리즈 생성
      uses: softprops/action-gh-release@de2c0eb89ae2a093876385947365aca7b0e5f844
      with:
        tag_name: ${{ needs.build-and-test.outputs.version }}
        name: Release ${{ needs.build-and-test.outputs.version }}
        body: ${{ env.RELEASE_BODY }}
        draft: false
        prerelease: ${{ contains(needs.build-and-test.outputs.version, 'alpha') || contains(needs.build-and-test.outputs.version, 'beta') || contains(needs.build-and-test.outputs.version, 'rc') }}
        files: ${{ env.RELEASE_FILES }}

  notify:
    name: 릴리즈 알림
    runs-on: ubuntu-latest
    needs: [build-and-test, create-release]
    if: always()
    
    steps:
    - name: 릴리즈 완료 알림
      run: |
        if [ "${{ needs.create-release.result }}" = "success" ]; then
          echo "🎉 릴리즈 ${{ needs.build-and-test.outputs.version }} 이/가 성공적으로 완료되었습니다!"
          echo "📦 GitHub 릴리즈: https://github.com/${{ github.repository }}/releases/tag/${{ needs.build-and-test.outputs.version }}"
          echo "🐳 Docker 이미지:"
          echo "  - ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE }}:${{ needs.build-and-test.outputs.version }}"
          echo "  - ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE }}:${{ needs.build-and-test.outputs.version }}"
        else
          echo "❌ 릴리즈 ${{ needs.build-and-test.outputs.version }} 처리 중 오류가 발생했습니다."
        fi